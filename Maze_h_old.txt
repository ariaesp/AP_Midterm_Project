#ifndef MAZE_H
#define MAZE_H

#include <iostream>
#include <list>
#include <set>
#include <compare>
#include <memory>
#include <time.h>
#include <random>
#include <math.h>

class Maze {
private:
    size_t N{};
    class Node {
    public:
        double value{0};
        Node* parent{nullptr};
        std::list<Node*> children;
        Node()=default;
        Node(double);
        explicit Node(double, Node&, std::list<Node*>);
        //Node(const Node& n, BinomialHeap& outBH );
        size_t get_order() const;
        void set_order(size_t new_order) {order=new_order;};

        std::partial_ordering operator<=> (const Node& n1) {return this->value <=> n1.value;}
        bool operator== (const Node& n1) {return this->value == n1.value;}
        
        friend std::ostream &operator<< (std::ostream &os, Node const& n1) {
            if (n1.parent==nullptr)
                return os << "(value:" << n1.value << ", parent: " << ", order:" << n1.order<< ")" << std::endl;
            else 
                return os << "(value:" << n1.value << ", parent:" << n1.parent->value << ", order:" << n1.order<< ")" << std::endl;
        }

        // static bool is_min_heap(Node const&);
        // static bool is_max_heap(Node const&);
    private:
        size_t order{0};  
    };
    static Node* merge(Node*, Node*);
    Node* head;
public:
    Maze()=default;
    Maze(double);
    ~Maze();
    //Maze(const Maze&);
    void newlayer(std::mt19937&, std::list<Node*>, double, double, double, double);
    void show();
    void Nshow(Node&, double, bool&);
    static void createnode() {
        std::list<Node*> list; 
        for (size_t i{};i<4;i++) {
            Node* a=new Node(i);
            list.push_back(a);
        }
        std::list<Node*>::iterator it=list.begin();
        while (it!=list.end()){
            std::cout<<(*it)->value<<std::endl;
            it++;
            if (it==list.end()) std::cout<<"yes"<<std::endl;
        }    
    };
};

#endif
